import("//brave/resources/brave_grit.gni")
import("//tools/polymer/polymer.gni")

import("//tools/grit/preprocess_if_expr.gni")
import("//tools/polymer/css_to_wrapper.gni")
import("//tools/polymer/html_to_wrapper.gni")
import("//ui/webui/resources/tools/generate_grd.gni")
import("//ui/webui/webui_features.gni")
import("./fonts/fonts.gni")
import("./sources.gni")

# Same path as //ui/webui/resources generates to
preprocess_folder = "$root_gen_dir/ui/webui/resources/preprocessed"

# Add Files to chrome://resources
# - Use preprocess_if_expr to get the files to same gen dir as chromium
# - Use extensible patch to ui/webui/resources/build.gn to get the info to typescript / manifest / grd and c++
# - Generate GRD for fonts, css, page_specific (css parts)
preprocess_if_expr("preprocess_ts") {
  in_folder = "."
  out_folder = preprocess_folder
  in_files = brave_web_component_files_native_ts + brave_native_html_files + brave_non_web_component_files_ts
  if (include_polymer) {
    in_files += brave_web_component_files_polymer_ts + brave_polymer_html_files + brave_css_files
  }
}

group("preprocess") {
  public_deps = [
    ":preprocess_ts",
  ]
  if (include_polymer) {
    public_deps += [
      ":css_wrapper_files",
      ":html_wrapper_files",
    ]
  }
}

if (include_polymer) {
  html_to_wrapper("html_wrapper_files") {
    deps = [ ":preprocess_ts" ]
    in_folder = preprocess_folder
    out_folder = preprocess_folder
    in_files = brave_polymer_html_files
    scheme = "relative"
    minify = optimize_webui
  }

  css_to_wrapper("css_wrapper_files") {
    deps = [ ":preprocess_ts" ]
    in_folder = preprocess_folder
    out_folder = preprocess_folder
    in_files = brave_css_files
    minify = optimize_webui
  }
}

static_files = [
  "page_specific/history/history_loading_shim.css",
  "page_specific/downloads/downloads_loading_shim.css",
  "page_specific/settings/settings_loading_shim.css",
  "page_specific/bookmarks/bookmarks_loading_shim.css",
  "page_specific/extensions/extensions_loading_shim.css",
  "css/md_colors.css",
  "css/text_defaults_md.css",
  "css/reset.css",
  "br_elements/br_toolbar/br_toolbar_selection_overlay_overrides.css"
]

group("grdp") {
  public_deps = [
    ":static_grdp",
    ":fonts_grdp",
  ]
}

generate_grd("static_grdp") {
  grd_prefix = "brave_webui"
  resource_path_prefix = "brave"
  out_grd = "$root_gen_dir/ui/webui/resources/brave_static_resources.grdp"
  input_files = static_files + [
    # TODO(petemill): ethereum_remote_client_page.html does not need to be served from chrome://resources
    # and should be put in to it's own resource package.
    "ethereum_remote_client_page.html"
  ]
  input_files_base_dir = rebase_path("$root_gen_dir/ui/webui/resources/brave", root_build_dir)
  deps = [
    ":static_copy",
    ":ethereum_remote_client_html_copy",
  ]
}

generate_grd("fonts_grdp") {
  grd_prefix = "brave_webui"
  out_grd = "$root_gen_dir/ui/webui/resources/brave_fonts_resources.grdp"
  input_files = brave_font_files
  input_files_base_dir = rebase_path("$root_gen_dir/ui/webui/resources/", root_build_dir)
  deps = [ ":fonts_copy" ]
}

copy("static_copy") {
  sources = static_files
  outputs = [ "$root_gen_dir/ui/webui/resources/brave/{{source_target_relative}}" ]
}

copy("fonts_copy") {
  sources = brave_font_files
  outputs = [ "$root_gen_dir/ui/webui/resources/{{source_target_relative}}" ]
}

copy("ethereum_remote_client_html_copy") {
  sources = [
    "../../../browser/ui/webui/ethereum_remote_client/ethereum_remote_client_page.html",
  ]
  outputs = [
    "$root_gen_dir/ui/webui/resources/brave/ethereum_remote_client_page.html"
  ]
}