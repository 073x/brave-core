diff --git a/chrome/browser/profiles/profile_manager.cc b/chrome/browser/profiles/profile_manager.cc
index 8ce681f0d694..74169ce6caab 100644
--- a/chrome/browser/profiles/profile_manager.cc
+++ b/chrome/browser/profiles/profile_manager.cc
@@ -128,14 +128,13 @@
 #if defined(OS_ANDROID)
 #include "chrome/browser/android/metrics/android_profile_session_durations_service_factory.h"
 #include "chrome/browser/ntp_snippets/content_suggestions_service_factory.h"
-#else
+#endif
 #include "chrome/browser/accessibility/caption_controller.h"
 #include "chrome/browser/accessibility/caption_controller_factory.h"
 #include "chrome/browser/first_run/first_run.h"
 #include "chrome/browser/ui/browser.h"
 #include "chrome/browser/ui/browser_finder.h"
 #include "chrome/browser/ui/browser_list.h"
-#endif
 
 #if defined(OS_CHROMEOS)
 #include "chrome/browser/browser_process_platform_part_chromeos.h"
@@ -242,7 +241,7 @@ void ProfileSizeTask(const base::FilePath& path, int enabled_app_count) {
     UMA_HISTOGRAM_COUNTS_10000("Profile.AppCount", enabled_app_count);
 }
 
-#if !defined(OS_ANDROID)
+//#if !defined(OS_ANDROID)
 // Schedule a profile for deletion if it isn't already scheduled.
 // Returns whether the profile has been newly scheduled.
 bool ScheduleProfileDirectoryForDeletion(const base::FilePath& path) {
@@ -271,7 +270,7 @@ void CancelProfileDeletion(const base::FilePath& path) {
   ProfilesToDelete().erase(path);
   ProfileMetrics::LogProfileDeleteUser(ProfileMetrics::DELETE_PROFILE_ABORTED);
 }
-#endif
+//#endif
 
 bool IsProfileDirectoryMarkedForDeletion(const base::FilePath& profile_path) {
   auto it = ProfilesToDelete().find(profile_path);
@@ -341,7 +340,7 @@ void OnProfileLoaded(ProfileManager::ProfileLoadedCallback client_callback,
       .Run(incognito ? profile->GetPrimaryOTRProfile() : profile);
 }
 
-#if !defined(OS_ANDROID)
+//#if !defined(OS_ANDROID)
 // Helper function for ScheduleForcedEphemeralProfileForDeletion.
 bool IsProfileEphemeral(ProfileAttributesStorage* storage,
                         const base::FilePath& profile_dir) {
@@ -349,7 +348,7 @@ bool IsProfileEphemeral(ProfileAttributesStorage* storage,
   return storage->GetProfileAttributesWithPath(profile_dir, &entry) &&
          entry->IsEphemeral();
 }
-#endif
+//#endif
 
 // Helper function that deletes entries from the kProfilesLastActive pref list.
 // It is called when every ephemeral profile is handled.
@@ -833,7 +832,7 @@ ProfileShortcutManager* ProfileManager::profile_shortcut_manager() {
   return profile_shortcut_manager_.get();
 }
 
-#if !defined(OS_ANDROID)
+//#if !defined(OS_ANDROID)
 void ProfileManager::MaybeScheduleProfileForDeletion(
     const base::FilePath& profile_dir,
     ProfileLoadedCallback callback,
@@ -872,7 +871,7 @@ void ProfileManager::ScheduleProfileForDeletion(
     EnsureActiveProfileExistsBeforeDeletion(std::move(callback), profile_dir);
   }
 }
-#endif  // !defined(OS_ANDROID)
+//#endif  // !defined(OS_ANDROID)
 
 void ProfileManager::AutoloadProfiles() {
   // If running in the background is disabled for the browser, do not autoload
@@ -1458,7 +1457,7 @@ Profile* ProfileManager::CreateAndInitializeProfile(
   return profile_ptr;
 }
 
-#if !defined(OS_ANDROID)
+//#if !defined(OS_ANDROID)
 void ProfileManager::EnsureActiveProfileExistsBeforeDeletion(
     ProfileLoadedCallback callback,
     const base::FilePath& profile_dir) {
@@ -1605,7 +1604,7 @@ void ProfileManager::FinishDeletingProfile(
   // Prevents CreateProfileAsync from re-creating the profile.
   MarkProfileDirectoryForDeletion(profile_dir);
 }
-#endif  // !defined(OS_ANDROID)
+//#endif  // !defined(OS_ANDROID)
 
 ProfileManager::ProfileInfo* ProfileManager::RegisterProfile(
     std::unique_ptr<Profile> profile,
@@ -1781,7 +1780,7 @@ void ProfileManager::SaveActiveProfiles() {
   }
 }
 
-#if !defined(OS_ANDROID)
+//#if !defined(OS_ANDROID)
 void ProfileManager::OnBrowserOpened(Browser* browser) {
   DCHECK(browser);
   Profile* profile = browser->profile();
@@ -1947,7 +1946,7 @@ void ProfileManager::ScheduleForcedEphemeralProfileForDeletion(
       found_entry ? found_entry->GetPath() : GenerateNextProfileDirectoryPath();
   FinishDeletingProfile(profile_dir, new_active_profile_dir);
 }
-#endif  // !defined(OS_ANDROID)
+//#endif  // !defined(OS_ANDROID)
 
 ProfileManagerWithoutInit::ProfileManagerWithoutInit(
     const base::FilePath& user_data_dir) : ProfileManager(user_data_dir) {
