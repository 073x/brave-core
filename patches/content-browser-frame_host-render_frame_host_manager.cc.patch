diff --git a/content/browser/frame_host/render_frame_host_manager.cc b/content/browser/frame_host/render_frame_host_manager.cc
index 73050ff98a79eaba01d322242745b36bb0198e80..c35ebbed1a871cacc5249eaa7ba8f5de23c5c20b 100644
--- a/content/browser/frame_host/render_frame_host_manager.cc
+++ b/content/browser/frame_host/render_frame_host_manager.cc
@@ -912,6 +912,8 @@ RenderFrameHostImpl* RenderFrameHostManager::GetFrameHostForNavigation(
     if (!speculative_render_frame_host_ ||
         speculative_render_frame_host_->GetSiteInstance() !=
             dest_site_instance.get()) {
+      LOG(ERROR) << "current_site_instance " << current_site_instance->GetMainFrameSite().spec();
+      LOG(ERROR) << "dest_site_instance " << dest_site_instance->GetMainFrameSite().spec();
       // If a previous speculative RenderFrameHost didn't exist or if its
       // SiteInstance differs from the one for the current URL, a new one needs
       // to be created.
@@ -1375,6 +1377,9 @@ RenderFrameHostManager::ShouldSwapBrowsingInstancesForNavigation(
   // Check with the content client as well.  Important to pass
   // current_effective_url here, which uses the SiteInstance's site if there is
   // no current_entry.
+  if (!render_frame_host_->GetSiteInstance()->main_frame_site_.is_empty())
+    return ShouldSwapBrowsingInstance::kYes_ForceSwap;
+
   if (GetContentClient()->browser()->ShouldSwapBrowsingInstancesForNavigation(
           render_frame_host_->GetSiteInstance(), current_effective_url,
           destination_effective_url)) {
@@ -1867,8 +1872,26 @@ bool RenderFrameHostManager::IsBrowsingInstanceSwapAllowedForPageTransition(
 scoped_refptr<SiteInstance> RenderFrameHostManager::ConvertToSiteInstance(
     const SiteInstanceDescriptor& descriptor,
     SiteInstanceImpl* candidate_instance) {
+  LOG(ERROR) << "ConvertToSiteInstance";
   SiteInstanceImpl* current_instance = render_frame_host_->GetSiteInstance();
 
+  GURL dest_url = descriptor.existing_site_instance
+      ? descriptor.existing_site_instance->GetSiteURL()
+      : descriptor.dest_url;
+  if (render_frame_host_->GetParent() &&
+      !render_frame_host_->GetMainFrame()->GetSiteInstance()->IsSuitableForURL(
+          dest_url)) {
+    LOG(ERROR) << "create new site instance for " << dest_url.spec() << " in "
+               << render_frame_host_->GetMainFrame()->GetSiteInstance()->GetSiteURL();
+    // TODO(bridiver) - use the same site instance within the rfh
+    auto site_instance = SiteInstance::CreateForURL(
+        delegate_->GetControllerForRenderManager().GetBrowserContext(),
+        dest_url);
+    site_instance->main_frame_site_ =
+        render_frame_host_->GetMainFrame()->GetSiteInstance()->GetSiteURL();
+    return site_instance;
+  }
+
   // Note: If the |candidate_instance| matches the descriptor, it will already
   // be set to |descriptor.existing_site_instance|.
   if (descriptor.existing_site_instance) {
