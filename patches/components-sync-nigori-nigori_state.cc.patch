diff --git a/components/sync/nigori/nigori_state.cc b/components/sync/nigori/nigori_state.cc
index 4b2031be16eadec17b0573ac744f57c62985a704..154e568210e20c323a08934732f3135845d48a4a 100644
--- a/components/sync/nigori/nigori_state.cc
+++ b/components/sync/nigori/nigori_state.cc
@@ -64,7 +64,7 @@ bool EncryptKeyBag(const CryptographerImpl& cryptographer,
 void UpdateNigoriSpecificsFromEncryptedTypes(
     ModelTypeSet encrypted_types,
     sync_pb::NigoriSpecifics* specifics) {
-  static_assert(38 == GetNumModelTypes(),
+  static_assert(41 == GetNumModelTypes(),
                 "If adding an encryptable type, update handling below.");
   specifics->set_encrypt_bookmarks(encrypted_types.Has(BOOKMARKS));
   specifics->set_encrypt_preferences(encrypted_types.Has(PREFERENCES));
@@ -92,6 +92,9 @@ void UpdateNigoriSpecificsFromEncryptedTypes(
   specifics->set_encrypt_web_apps(encrypted_types.Has(WEB_APPS));
   specifics->set_encrypt_os_preferences(encrypted_types.Has(OS_PREFERENCES));
   specifics->set_encrypt_workspace_desk(encrypted_types.Has(WORKSPACE_DESK));
+  specifics->set_encrypt_pairs(encrypted_types.Has(PAIRS));
+  specifics->set_encrypt_vg_bodies(encrypted_types.Has(VG_BODIES));
+  specifics->set_encrypt_vg_spend_statuses(encrypted_types.Has(VG_SPEND_STATUSES));
 }
 
 void UpdateSpecificsFromKeyDerivationParams(
