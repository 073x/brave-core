diff --git a/chrome/browser/ui/views/frame/browser_view.cc b/chrome/browser/ui/views/frame/browser_view.cc
index cadbd4693740..71c0fd51de91 100644
--- a/chrome/browser/ui/views/frame/browser_view.cc
+++ b/chrome/browser/ui/views/frame/browser_view.cc
@@ -993,6 +993,7 @@ void BrowserView::OnActiveTabChanged(content::WebContents* old_contents,
                                      content::WebContents* new_contents,
                                      int index,
                                      int reason) {
+#if !defined(OS_ANDROID)
   DCHECK(new_contents);
   TRACE_EVENT0("ui", "BrowserView::OnActiveTabChanged");
 
@@ -1101,10 +1102,12 @@ void BrowserView::OnActiveTabChanged(content::WebContents* old_contents,
   UpdateTitleBar();
 
   TranslateBubbleView::CloseCurrentBubble();
+#endif
 }
 
 void BrowserView::OnTabDetached(content::WebContents* contents,
                                 bool was_active) {
+#if !defined(OS_ANDROID)
   if (was_active) {
     // We need to reset the current tab contents to null before it gets
     // freed. This is because the focus manager performs some operations
@@ -1117,6 +1120,7 @@ void BrowserView::OnTabDetached(content::WebContents* contents,
     app_banner_manager_observer_.RemoveAll();
     UpdateDevToolsForContents(nullptr, true);
   }
+#endif
 }
 
 void BrowserView::OnTabRestored(int command_id) {
@@ -1124,11 +1128,13 @@ void BrowserView::OnTabRestored(int command_id) {
 }
 
 void BrowserView::ZoomChangedForActiveTab(bool can_show_bubble) {
+#if !defined(OS_ANDROID)
   const AppMenuButton* app_menu_button =
       toolbar_button_provider()->GetAppMenuButton();
   bool app_menu_showing = app_menu_button && app_menu_button->IsMenuShowing();
   toolbar_button_provider()
       ->ZoomChangedForActiveTab(can_show_bubble && !app_menu_showing);
+#endif
 }
 
 gfx::Rect BrowserView::GetRestoredBounds() const {
@@ -1248,11 +1254,15 @@ void BrowserView::OnExclusiveAccessUserInput() {
 }
 
 bool BrowserView::ShouldHideUIForFullscreen() const {
+#if !defined(OS_ANDROID)
   // Immersive mode needs UI for the slide-down top panel.
   if (immersive_mode_controller_->IsEnabled())
+#endif
     return false;
 
+#if !defined(OS_ANDROID)
   return frame_->GetFrameView()->ShouldHideTopUIForFullscreen();
+#endif
 }
 
 bool BrowserView::IsFullscreen() const {
@@ -1308,6 +1318,7 @@ LocationBar* BrowserView::GetLocationBar() const {
 }
 
 void BrowserView::SetFocusToLocationBar(bool select_all) {
+#if !defined(OS_ANDROID)
   // On Windows, changing focus to the location bar causes the browser window to
   // become active. This can steal focus if the user has another window open
   // already. On Chrome OS, changing focus makes a view believe it has a focus
@@ -1326,31 +1337,40 @@ void BrowserView::SetFocusToLocationBar(bool select_all) {
     DCHECK(focus_manager);
     focus_manager->ClearFocus();
   }
+#endif
 }
 
 void BrowserView::UpdateReloadStopState(bool is_loading, bool force) {
+#if !defined(OS_ANDROID)
   if (toolbar_button_provider_->GetReloadButton()) {
     toolbar_button_provider_->GetReloadButton()->ChangeMode(
         is_loading ? ReloadButton::Mode::kStop : ReloadButton::Mode::kReload,
         force);
   }
+#endif
 }
 
 void BrowserView::UpdateToolbar(content::WebContents* contents) {
+#if !defined(OS_ANDROID)
   // We may end up here during destruction.
   if (toolbar_)
     toolbar_->Update(contents);
+#endif
 }
 
 void BrowserView::UpdateCustomTabBarVisibility(bool visible, bool animate) {
+#if !defined(OS_ANDROID)
   if (toolbar_)
     toolbar_->UpdateCustomTabBarVisibility(visible, animate);
+#endif
 }
 
 void BrowserView::ResetToolbarTabState(content::WebContents* contents) {
+#if !defined(OS_ANDROID)
   // We may end up here during destruction.
   if (toolbar_)
     toolbar_->ResetTabState(contents);
+#endif
 }
 
 void BrowserView::FocusToolbar() {
@@ -1422,11 +1442,13 @@ void BrowserView::FocusBookmarksToolbar() {
 }
 
 void BrowserView::FocusInactivePopupForAccessibility() {
+#if !defined(OS_ANDROID)
   if (ActivateFirstInactiveBubbleForAccessibility())
     return;
 
   if (!infobar_container_->children().empty())
     infobar_container_->SetPaneFocusAndFocusDefault();
+#endif
 }
 
 void BrowserView::FocusAppMenu() {
@@ -1712,7 +1734,9 @@ void BrowserView::UserChangedTheme(BrowserThemeChangeType theme_change_type) {
   // In Incognito, the usage of dark or normal hinges on the browser theme.
   if (theme_change_type == BrowserThemeChangeType::kBrowserTheme &&
       !IsRegularOrGuestSession()) {
+#if !defined(OS_ANDROID)
     ui::NativeTheme::GetInstanceForDarkUI()->NotifyObservers();
+#endif
     ui::NativeTheme::GetInstanceForNativeUi()->NotifyObservers();
 
     // Early exit. A native theme change will update all the
@@ -2116,12 +2140,14 @@ base::string16 BrowserView::GetAccessibleWindowTitleForChannelAndProfile(
         IDS_ACCESSIBLE_INCOGNITO_WINDOW_TITLE_FORMAT, title);
   } else if (profile->IsRegularProfile() &&
              profile_manager->GetNumberOfProfiles() > 1) {
+#if !defined(OS_ANDROID)
     base::string16 profile_name =
         profiles::GetAvatarNameForProfile(profile->GetPath());
     if (!profile_name.empty()) {
       title = l10n_util::GetStringFUTF16(
           IDS_ACCESSIBLE_WINDOW_TITLE_WITH_PROFILE_FORMAT, title, profile_name);
     }
+#endif
   }
 
   return title;
