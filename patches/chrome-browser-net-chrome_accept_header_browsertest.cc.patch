diff --git a/chrome/browser/net/chrome_accept_header_browsertest.cc b/chrome/browser/net/chrome_accept_header_browsertest.cc
index 6fcb16d5000cfa4567663ee8a518180c0f79e057..ecead8ef7eb328ba47de3420c02f1227549d8a18 100644
--- a/chrome/browser/net/chrome_accept_header_browsertest.cc
+++ b/chrome/browser/net/chrome_accept_header_browsertest.cc
@@ -11,18 +11,26 @@
 #include "media/media_buildflags.h"
 #include "net/test/embedded_test_server/http_request.h"
 #include "third_party/blink/public/common/buildflags.h"
+#include "third_party/blink/public/common/features.h"
 
 using ChromeAcceptHeaderTest = InProcessBrowserTest;
 
+#if BUILDFLAG(ENABLE_AV1_DECODER) || BUILDFLAG(ENABLE_JXL_DECODER)
 namespace {
 std::string GetOptionalImageCodecs() {
   std::string result;
+#if BUILDFLAG(ENABLE_JXL_DECODER)
+  if (base::FeatureList::IsEnabled(blink::features::kJXL)) {
+    result.append("image/jxl,");
+  }
+#endif  // BUILDFLAG(ENABLE_JXL_DECODER)
 #if BUILDFLAG(ENABLE_AV1_DECODER)
   result.append("image/avif,");
-#endif
+#endif  // BUILDFLAG(ENABLE_AV1_DECODER)
   return result;
 }
 }  // namespace
+#endif  // BUILDFLAG(ENABLE_AV1_DECODER) || BUILDFLAG(ENABLE_JXL_DECODER)
 
 IN_PROC_BROWSER_TEST_F(ChromeAcceptHeaderTest, Check) {
   net::EmbeddedTestServer server(net::EmbeddedTestServer::TYPE_HTTP);
@@ -53,15 +61,24 @@ IN_PROC_BROWSER_TEST_F(ChromeAcceptHeaderTest, Check) {
   // With MimeHandlerViewInCrossProcessFrame, embedded PDF will go through the
   // navigation code path and behaves similarly to PDF loaded inside <iframe>.
   std::string expected_plugin_accept_header =
+      "text/html,application/xhtml+xml,application/xml;q=0.9,image/"
+      "webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9";
+#if BUILDFLAG(ENABLE_AV1_DECODER) || BUILDFLAG(ENABLE_JXL_DECODER)
+  expected_plugin_accept_header =
       "text/html,application/xhtml+xml,application/xml;q=0.9," +
       GetOptionalImageCodecs() +
       "image/webp,image/apng,*/*;q=0.8,"
       "application/signed-exchange;v=b3;q=0.7";
+#endif // BUILDFLAG(ENABLE_AV1_DECODER) || BUILDFLAG(ENABLE_JXL_DECODER)
   ASSERT_EQ(expected_plugin_accept_header, plugin_accept_header);
 
   std::string expected_favicon_accept_header =
+      "image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8";
+#if BUILDFLAG(ENABLE_AV1_DECODER) || BUILDFLAG(ENABLE_JXL_DECODER)
+  expected_favicon_accept_header =
       GetOptionalImageCodecs() +
       "image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8";
+#endif // BUILDFLAG(ENABLE_AV1_DECODER) || BUILDFLAG(ENABLE_JXL_DECODER)
   ASSERT_EQ(expected_favicon_accept_header, favicon_accept_header);
 
   // Since the server uses local variables.
