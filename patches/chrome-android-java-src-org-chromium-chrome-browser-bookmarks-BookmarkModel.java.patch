diff --git a/chrome/android/java/src/org/chromium/chrome/browser/bookmarks/BookmarkModel.java b/chrome/android/java/src/org/chromium/chrome/browser/bookmarks/BookmarkModel.java
index 19d1702e98dadf4c4cbeb732117fd832d32fe361..d91f844ea3dd0c9ddc56d1a6640f6523da9c111e 100644
--- a/chrome/android/java/src/org/chromium/chrome/browser/bookmarks/BookmarkModel.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/bookmarks/BookmarkModel.java
@@ -31,7 +31,7 @@ public class BookmarkModel extends BookmarkBridge {
          * @param titles All titles of the bookmarks to be deleted.
          * @param isUndoable Whether the deletion is undoable.
          */
-        void onDeleteBookmarks(String[] titles, boolean isUndoable);
+        void onDeleteBookmarks(String[] titles, List<BookmarkItem> bookmarks, boolean isUndoable);
     }
 
     private ObserverList<BookmarkDeleteObserver> mDeleteObservers = new ObserverList<>();
@@ -87,6 +87,7 @@ public class BookmarkModel extends BookmarkBridge {
      */
     void deleteBookmarks(BookmarkId... bookmarks) {
         assert bookmarks != null && bookmarks.length > 0;
+        List<BookmarkItem> bookmarksItems = new ArrayList<BookmarkItem>();
         // Store all titles of bookmarks.
         List<String> titles = new ArrayList<>();
         boolean isUndoable = true;
@@ -97,12 +98,13 @@ public class BookmarkModel extends BookmarkBridge {
             if (bookmarkItem == null) continue;
             isUndoable &= (bookmarkId.getType() == BookmarkType.NORMAL);
             titles.add(bookmarkItem.getTitle());
+            bookmarksItems.add(bookmarkItem);bookmarksItems.addAll(BraveBookmarkWorker.GetChildren(bookmarkItem, this));
             deleteBookmark(bookmarkId);
         }
         endGroupingUndos();
 
         for (BookmarkDeleteObserver observer : mDeleteObservers) {
-            observer.onDeleteBookmarks(titles.toArray(new String[titles.size()]), isUndoable);
+            observer.onDeleteBookmarks(titles.toArray(new String[titles.size()]), bookmarksItems, isUndoable);
         }
     }
 
@@ -115,6 +117,7 @@ public class BookmarkModel extends BookmarkBridge {
         for (int i = 0; i < bookmarkIds.size(); ++i) {
             moveBookmark(bookmarkIds.get(i), newParentId, appendIndex + i);
         }
+        BraveBookmarkWorker.moveBookmarks(bookmarkIds, newParentId, this);
     }
 
     /**
