diff --git a/third_party/blink/renderer/core/script/script_loader.cc b/third_party/blink/renderer/core/script/script_loader.cc
index 211d52589e86f5563254a3db50c6b710509336c6..ea371c05e8a00dc67bb4223a1c04ccec7aa44a1d 100644
--- a/third_party/blink/renderer/core/script/script_loader.cc
+++ b/third_party/blink/renderer/core/script/script_loader.cc
@@ -71,6 +71,15 @@
 #include "third_party/blink/renderer/platform/wtf/text/string_builder.h"
 #include "third_party/blink/renderer/platform/wtf/text/string_hash.h"
 
+#include "brave/third_party/blink/brave_page_graph/buildflags/buildflags.h"
+#if BUILDFLAG(BRAVE_PAGE_GRAPH_ENABLED)
+#include "third_party/blink/renderer/core/html/html_script_element.h"
+#include "third_party/blink/renderer/core/dom/dom_node_ids.h"
+#include "third_party/blink/renderer/core/svg/svg_script_element.h"
+#include "brave/third_party/blink/brave_page_graph/types.h"
+#include "brave/third_party/blink/brave_page_graph/page_graph.h"
+#endif
+
 namespace blink {
 
 ScriptLoader::ScriptLoader(ScriptElementBase* element,
@@ -110,6 +119,10 @@ void ScriptLoader::Trace(Visitor* visitor) {
   visitor->Trace(pending_script_);
   visitor->Trace(prepared_pending_script_);
   visitor->Trace(resource_keep_alive_);
+#if BUILDFLAG(BRAVE_PAGE_GRAPH_ENABLED)
+  visitor->Trace(script_elm_html_);
+  visitor->Trace(script_elm_svg_);
+#endif
   PendingScriptClient::Trace(visitor);
 }
 
@@ -363,7 +376,7 @@ bool ScriptLoader::PrepareScript(const TextPosition& script_start_position,
   // Accept import maps only if ImportMapsEnabled().
   if (is_import_map) {
     Modulator* modulator = Modulator::From(
-        ToScriptStateForMainWorld(context_document->GetFrame()));
+        ToScriptStateForMainWorld(context_document->GetFrame()), context_document->GetFrame()->GetDocument()->GetPageGraph(), element_->GetDOMNodeId());
     if (!modulator->ImportMapsEnabled()) {
       // Import maps should have been rejected in spec Step 7 above.
       // TODO(hiroshige): Returning here (i.e. after spec Step 11) is not spec
@@ -501,7 +514,7 @@ bool ScriptLoader::PrepareScript(const TextPosition& script_start_position,
   // error at the element, and return. [spec text]
   if (is_import_map) {
     Modulator* modulator = Modulator::From(
-        ToScriptStateForMainWorld(context_document->GetFrame()));
+        ToScriptStateForMainWorld(context_document->GetFrame()), context_document->GetFrame()->GetDocument()->GetPageGraph(), element_->GetDOMNodeId());
     if (!modulator->IsAcquiringImportMaps()) {
       element_document.AddConsoleMessage(MakeGarbageCollected<ConsoleMessage>(
           mojom::ConsoleMessageSource::kJavaScript,
@@ -601,10 +614,29 @@ bool ScriptLoader::PrepareScript(const TextPosition& script_start_position,
       // Fetch an external module script graph given url, settings object, and
       // options.</spec>
       Modulator* modulator = Modulator::From(
-          ToScriptStateForMainWorld(context_document->GetFrame()));
+          ToScriptStateForMainWorld(context_document->GetFrame()), context_document->GetFrame()->GetDocument()->GetPageGraph(), element_->GetDOMNodeId());
       FetchModuleScriptTree(url, fetch_client_settings_object_fetcher,
                             modulator, options);
     }
+#if BUILDFLAG(BRAVE_PAGE_GRAPH_ENABLED)
+    {
+      ::brave_page_graph::PageGraph* page_graph = context_document
+        ->GetFrame()->GetDocument()->GetPageGraph();
+      if (page_graph != nullptr) {
+        HTMLScriptElement* script_elm_html = GetHTMLScriptElement();
+        SVGScriptElement* script_elm_svg = GetSVGScriptElement();
+        if (script_elm_html != nullptr) {
+          page_graph->RegisterElmForRemoteScript(
+            DOMNodeIds::IdForNode(script_elm_html),
+            url);
+        } else if (script_elm_svg != nullptr) {
+          page_graph->RegisterElmForRemoteScript(
+            DOMNodeIds::IdForNode(script_elm_svg),
+            url);
+        }
+      }
+    }
+#endif
     // <spec step="24.6">When the chosen algorithm asynchronously completes, set
     // the script's script to the result. At that time, the script is ready.
     // ...</spec>
@@ -682,6 +714,28 @@ bool ScriptLoader::PrepareScript(const TextPosition& script_start_position,
         // <spec step="25.2.A.3">The script is ready.</spec>
         //
         // Implemented by ClassicPendingScript.
+
+#if BUILDFLAG(BRAVE_PAGE_GRAPH_ENABLED)
+        {
+          ::brave_page_graph::PageGraph* const page_graph = context_document
+            ->GetFrame()->GetDocument()->GetPageGraph();
+          if (page_graph != nullptr) {
+            HTMLScriptElement* script_elm_html = GetHTMLScriptElement();
+            SVGScriptElement* script_elm_svg = GetSVGScriptElement();
+            ClassicScript* classic_script = static_cast<ClassicScript*>(
+              prepared_pending_script_->GetSource(base_url));
+            if (script_elm_html != nullptr) {
+              page_graph->RegisterElmForLocalScript(
+                DOMNodeIds::IdForNode(script_elm_html),
+                classic_script->GetScriptSourceCode());
+            } else if (script_elm_svg != nullptr) {
+              page_graph->RegisterElmForLocalScript(
+                DOMNodeIds::IdForNode(script_elm_svg),
+                classic_script->GetScriptSourceCode());
+            }
+          }
+        }
+#endif
         break;
       }
 
@@ -696,7 +750,23 @@ bool ScriptLoader::PrepareScript(const TextPosition& script_start_position,
         // href="https://html.spec.whatwg.org/C/#fetch-an-inline-module-script-graph">
         const KURL& source_url = element_document.Url();
         Modulator* modulator = Modulator::From(
-            ToScriptStateForMainWorld(context_document->GetFrame()));
+            ToScriptStateForMainWorld(context_document->GetFrame()), context_document->GetFrame()->GetDocument()->GetPageGraph(), element_->GetDOMNodeId());
+
+#if BUILDFLAG(BRAVE_PAGE_GRAPH_ENABLED)
+        {
+          ::brave_page_graph::PageGraph* const page_graph = context_document
+            ->GetFrame()->GetDocument()->GetPageGraph();
+          if (page_graph != nullptr) {
+            HTMLScriptElement* script_elm_html = GetHTMLScriptElement();
+            ScriptSourceCode source = ScriptSourceCode(element_->ChildTextContent().Impl());
+            if (script_elm_html != nullptr) {
+              page_graph->RegisterElmForLocalScript(
+                DOMNodeIds::IdForNode(script_elm_html),
+                source);
+            }
+          }
+        }
+#endif
 
         // <spec label="fetch-an-inline-module-script-graph" step="1">Let script
         // be the result of creating a JavaScript module script using source
@@ -1048,4 +1118,23 @@ String ScriptLoader::GetScriptText() const {
                                      element_->GetDocument().ContextDocument());
 }
 
+#if BUILDFLAG(BRAVE_PAGE_GRAPH_ENABLED)
+void ScriptLoader::SetSVGScriptElement(SVGScriptElement* const elm) {
+  script_elm_svg_ = elm;
+}
+
+SVGScriptElement* ScriptLoader::GetSVGScriptElement() const {
+  return script_elm_svg_;
+}
+
+void ScriptLoader::SetHTMLScriptElement(HTMLScriptElement* const elm) {
+  script_elm_html_ = elm;
+}
+
+HTMLScriptElement* ScriptLoader::GetHTMLScriptElement() const {
+  return script_elm_html_;
+}
+#endif
+
+
 }  // namespace blink
