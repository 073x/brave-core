diff --git a/third_party/blink/renderer/core/script/script_loader.cc b/third_party/blink/renderer/core/script/script_loader.cc
index 211d52589e86f5563254a3db50c6b710509336c6..7551c78e6216136de06e339b3aa3cccceb84ed39 100644
--- a/third_party/blink/renderer/core/script/script_loader.cc
+++ b/third_party/blink/renderer/core/script/script_loader.cc
@@ -71,6 +71,15 @@
 #include "third_party/blink/renderer/platform/wtf/text/string_builder.h"
 #include "third_party/blink/renderer/platform/wtf/text/string_hash.h"
 
+#include "brave/third_party/blink/brave_page_graph/buildflags/buildflags.h"
+#if BUILDFLAG(BRAVE_PAGE_GRAPH_ENABLED)
+#include "third_party/blink/renderer/core/html/html_script_element.h"
+#include "third_party/blink/renderer/core/dom/dom_node_ids.h"
+#include "third_party/blink/renderer/core/svg/svg_script_element.h"
+#include "brave/third_party/blink/brave_page_graph/types.h"
+#include "brave/third_party/blink/brave_page_graph/page_graph.h"
+#endif
+
 namespace blink {
 
 ScriptLoader::ScriptLoader(ScriptElementBase* element,
@@ -110,6 +119,10 @@ void ScriptLoader::Trace(Visitor* visitor) {
   visitor->Trace(pending_script_);
   visitor->Trace(prepared_pending_script_);
   visitor->Trace(resource_keep_alive_);
+#if BUILDFLAG(BRAVE_PAGE_GRAPH_ENABLED)
+  visitor->Trace(script_elm_html_);
+  visitor->Trace(script_elm_svg_);
+#endif
   PendingScriptClient::Trace(visitor);
 }
 
@@ -580,6 +593,25 @@ bool ScriptLoader::PrepareScript(const TextPosition& script_start_position,
       else
         encoding = element_document.Encoding();
 
+#if BUILDFLAG(BRAVE_PAGE_GRAPH_ENABLED)
+      {
+        ::brave_page_graph::PageGraph* page_graph = context_window->GetFrame()
+          ->GetDocument()->GetPageGraph();
+        if (page_graph != nullptr) {
+          HTMLScriptElement* script_elm_html = GetHTMLScriptElement();
+          SVGScriptElement* script_elm_svg = GetSVGScriptElement();
+          if (script_elm_html != nullptr) {
+            page_graph->RegisterElmForRemoteScript(
+              DOMNodeIds::IdForNode(script_elm_html),
+              url);
+          } else if (script_elm_svg != nullptr) {
+            page_graph->RegisterElmForRemoteScript(
+              DOMNodeIds::IdForNode(script_elm_svg),
+              url);
+          }
+        }
+      }
+#endif
       // <spec step="24.6.A">"classic"
       //
       // Fetch a classic script given url, settings object, options, classic
@@ -682,6 +714,30 @@ bool ScriptLoader::PrepareScript(const TextPosition& script_start_position,
         // <spec step="25.2.A.3">The script is ready.</spec>
         //
         // Implemented by ClassicPendingScript.
+
+#if BUILDFLAG(BRAVE_PAGE_GRAPH_ENABLED)
+        {
+          ::brave_page_graph::PageGraph* const page_graph = context_window
+            ->GetFrame()->GetDocument()->GetPageGraph();
+          if (page_graph != nullptr) {
+            HTMLScriptElement* script_elm_html = GetHTMLScriptElement();
+            SVGScriptElement* script_elm_svg = GetSVGScriptElement();
+            if (script_elm_html != nullptr) {
+              ClassicScript* classic_script = static_cast<ClassicScript*>(
+                prepared_pending_script_->GetSource(base_url));
+              page_graph->RegisterElmForLocalScript(
+                DOMNodeIds::IdForNode(script_elm_html),
+                classic_script->GetScriptSourceCode());
+            } else if (script_elm_svg != nullptr) {
+              ClassicScript* classic_script = static_cast<ClassicScript*>(
+                prepared_pending_script_->GetSource(base_url));
+              page_graph->RegisterElmForLocalScript(
+                DOMNodeIds::IdForNode(script_elm_svg),
+                classic_script->GetScriptSourceCode());
+            }
+          }
+        }
+#endif
         break;
       }
 
@@ -1048,4 +1104,23 @@ String ScriptLoader::GetScriptText() const {
                                      element_->GetExecutionContext());
 }
 
+#if BUILDFLAG(BRAVE_PAGE_GRAPH_ENABLED)
+void ScriptLoader::SetSVGScriptElement(SVGScriptElement* const elm) {
+  script_elm_svg_ = elm;
+}
+
+SVGScriptElement* ScriptLoader::GetSVGScriptElement() const {
+  return script_elm_svg_;
+}
+
+void ScriptLoader::SetHTMLScriptElement(HTMLScriptElement* const elm) {
+  script_elm_html_ = elm;
+}
+
+HTMLScriptElement* ScriptLoader::GetHTMLScriptElement() const {
+  return script_elm_html_;
+}
+#endif
+
+
 }  // namespace blink
