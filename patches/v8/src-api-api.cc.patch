diff --git a/src/api/api.cc b/src/api/api.cc
index 8423f288efa3f058c11872c90546971a9aa0b8b8..ee8b2b3367d4d23171f72eed95cd180e5e7f8187 100644
--- a/src/api/api.cc
+++ b/src/api/api.cc
@@ -2217,6 +2217,13 @@ Local<Data> ScriptOrModule::HostDefinedOptions() {
   return ToApiHandle<Data>(val);
 }
 
+// #if BUILDFLAG(BRAVE_PAGE_GRAPH_ENABLED)
+// int ScriptOrModule::GetScriptId() const {
+//   i::Handle<i::ScriptOrModule> self = Utils::OpenHandle(this);
+//   return self->id();
+// }
+// #endif
+
 Local<UnboundScript> Script::GetUnboundScript() {
   i::DisallowGarbageCollection no_gc;
   i::Handle<i::JSFunction> obj = Utils::OpenHandle(this);
@@ -5405,6 +5412,24 @@ Local<v8::Value> Function::GetBoundFunction() const {
   return v8::Undefined(reinterpret_cast<v8::Isolate*>(self->GetIsolate()));
 }
 
+// #if BUILDFLAG(BRAVE_PAGE_GRAPH_ENABLED)
+Local<Function> Function::GetInnermostFunction() const {
+  auto self = Utils::OpenHandle(this);
+
+  Local<Function> function = Utils::Convert<i::Object, Function>(self);
+  while (true) {
+    Local<v8::Value> bound_function = function->GetBoundFunction();
+    if (bound_function->IsFunction()) {
+      function = bound_function.As<Function>();
+    } else {
+      break;
+    }
+  }
+
+  return function;
+}
+// #endif
+
 MaybeLocal<String> v8::Function::FunctionProtoToString(Local<Context> context) {
   PREPARE_FOR_EXECUTION(context, Function, FunctionProtoToString, String);
   auto self = Utils::OpenHandle(this);
@@ -8389,6 +8414,33 @@ void Isolate::ReportExternalAllocationLimitReached() {
   heap->ReportExternalMemoryPressure();
 }
 
+// #if BUILDFLAG(BRAVE_PAGE_GRAPH_ENABLED)
+int Isolate::GetExecutingScriptId(int* out_script_position) {
+  i::Isolate* internal_isolate = reinterpret_cast<i::Isolate*>(this);
+  return internal_isolate->GetExecutingScriptId(out_script_position);
+}
+
+void Isolate::GetAllExecutingScripts(std::function<void(int, int)> callback) {
+  i::Isolate* internal_isolate = reinterpret_cast<i::Isolate*>(this);
+  return internal_isolate->GetAllExecutingScripts(callback);
+}
+
+void Isolate::SetEvalScriptCompiledFunc(const EvalScriptCompiledFunc func) {
+  i::Isolate* internal_isolate = reinterpret_cast<i::Isolate*>(this);
+  internal_isolate->SetEvalScriptCompiledFunc(func);
+}
+
+void Isolate::SetBuiltInFuncCallFunc(const BuiltInFuncCallFunc func) {
+  i::Isolate* internal_isolate = reinterpret_cast<i::Isolate*>(this);
+  internal_isolate->SetBuiltInFuncCallFunc(func);
+}
+
+void Isolate::SetBuiltInFuncResponseFunc(const BuiltInFuncResponseFunc func) {
+  i::Isolate* internal_isolate = reinterpret_cast<i::Isolate*>(this);
+  internal_isolate->SetBuiltInFuncResponseFunc(func);
+}
+// #endif
+
 HeapProfiler* Isolate::GetHeapProfiler() {
   i::HeapProfiler* heap_profiler =
       reinterpret_cast<i::Isolate*>(this)->heap_profiler();
