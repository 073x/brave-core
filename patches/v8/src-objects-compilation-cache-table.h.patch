diff --git a/src/objects/compilation-cache-table.h b/src/objects/compilation-cache-table.h
index e39e013c61c8a81264b61cb02032736824cbfbb2..af38b258633be8d7d0e5fbe28a775de391a1344c 100644
--- a/src/objects/compilation-cache-table.h
+++ b/src/objects/compilation-cache-table.h
@@ -32,7 +32,7 @@ class CompilationCacheShape : public BaseShape<HashTableKey*> {
   static inline uint32_t StringSharedHash(String source,
                                           SharedFunctionInfo shared,
                                           LanguageMode language_mode,
-                                          int position);
+                                          int position, int parent_script_id);
 
   static inline uint32_t StringSharedHash(String source,
                                           LanguageMode language_mode);
@@ -89,11 +89,11 @@ class CompilationCacheTable
   // The 'script' cache contains SharedFunctionInfos.
   static MaybeHandle<SharedFunctionInfo> LookupScript(
       Handle<CompilationCacheTable> table, Handle<String> src,
-      LanguageMode language_mode, Isolate* isolate);
+      LanguageMode language_mode, Isolate* isolate, int parent_script_id);
   static Handle<CompilationCacheTable> PutScript(
       Handle<CompilationCacheTable> cache, Handle<String> src,
       LanguageMode language_mode, Handle<SharedFunctionInfo> value,
-      Isolate* isolate);
+      Isolate* isolate, int parent_script_id);
 
   // Eval code only gets cached after a second probe for the
   // code object. To do so, on first "put" only a hash identifying the
@@ -110,12 +110,12 @@ class CompilationCacheTable
                                  Handle<String> src,
                                  Handle<SharedFunctionInfo> shared,
                                  Handle<Context> native_context,
-                                 LanguageMode language_mode, int position);
+                                 LanguageMode language_mode, int position, int parent_script_id);
   static Handle<CompilationCacheTable> PutEval(
       Handle<CompilationCacheTable> cache, Handle<String> src,
       Handle<SharedFunctionInfo> outer_info, Handle<SharedFunctionInfo> value,
       Handle<Context> native_context, Handle<FeedbackCell> feedback_cell,
-      int position);
+      int position, int parent_script_id);
 
   // The RegExp cache contains JSRegExp::data fixed arrays.
   Handle<Object> LookupRegExp(Handle<String> source, JSRegExp::Flags flags);
