diff --git a/include/v8-script.h b/include/v8-script.h
index b51dbc3dfd38802d2c3908310f96d46d12101ac7..03e4626517cc43e4e885031f87e741b1bf71c336 100644
--- a/include/v8-script.h
+++ b/include/v8-script.h
@@ -50,6 +50,7 @@ class V8_EXPORT ScriptOrModule {
   V8_DEPRECATED("Use HostDefinedOptions")
   Local<PrimitiveArray> GetHostDefinedOptions();
   Local<Data> HostDefinedOptions();
+  //int GetScriptId() const;
 };
 
 /**
@@ -235,6 +236,7 @@ class V8_EXPORT Module : public Data {
    */
   Local<UnboundModuleScript> GetUnboundModuleScript();
 
+  int GetModuleScriptId() const;
   /**
    * Returns the underlying script's id.
    *
@@ -384,6 +386,7 @@ class V8_EXPORT ScriptCompiler {
     // Source takes ownership of both CachedData and CodeCacheConsumeTask.
     // The caller *must* ensure that the cached data is from a trusted source.
     V8_INLINE Source(Local<String> source_string, const ScriptOrigin& origin,
+                     int parent_script_id = 0,
                      CachedData* cached_data = nullptr,
                      ConsumeCodeCacheTask* consume_cache_task = nullptr);
     // Source takes ownership of both CachedData and CodeCacheConsumeTask.
@@ -411,6 +414,7 @@ class V8_EXPORT ScriptCompiler {
     ScriptOriginOptions resource_options;
     Local<Value> source_map_url;
     Local<Data> host_defined_options;
+    int parent_script_id;
 
     // Cached data from previous compilation (if a kConsume*Cache flag is
     // set), or hold newly generated cache data (kProduce*Cache flags) are
@@ -601,6 +605,7 @@ class V8_EXPORT ScriptCompiler {
    */
   static V8_WARN_UNUSED_RESULT MaybeLocal<Script> Compile(
       Local<Context> context, StreamedSource* source,
+      int parent_script_id,
       Local<String> full_source_string, const ScriptOrigin& origin);
 
   /**
@@ -708,6 +713,7 @@ class V8_EXPORT ScriptCompiler {
 };
 
 ScriptCompiler::Source::Source(Local<String> string, const ScriptOrigin& origin,
+                               int parent_script_id,
                                CachedData* data,
                                ConsumeCodeCacheTask* consume_cache_task)
     : source_string(string),
@@ -717,6 +723,7 @@ ScriptCompiler::Source::Source(Local<String> string, const ScriptOrigin& origin,
       resource_options(origin.Options()),
       source_map_url(origin.SourceMapUrl()),
       host_defined_options(origin.GetHostDefinedOptions()),
+      parent_script_id(parent_script_id),
       cached_data(data),
       consume_cache_task(consume_cache_task) {}
 
