diff --git a/src/execution/isolate.cc b/src/execution/isolate.cc
index c9c6225eb8fd8b8278c707beb521bde910ab49d9..9febc53ebffdc0a8917d376e6ae6e8dd3c4d2b70 100644
--- a/src/execution/isolate.cc
+++ b/src/execution/isolate.cc
@@ -93,6 +93,8 @@
 #include "src/diagnostics/unwinding-info-win64.h"
 #endif  // V8_OS_WIN64
 
+#include "brave/third_party/blink/brave_page_graph/buildflags/buildflags.h"
+
 extern "C" const uint8_t* v8_Default_embedded_blob_;
 extern "C" uint32_t v8_Default_embedded_blob_size_;
 
@@ -4403,6 +4405,49 @@ void Isolate::CollectSourcePositionsForAllBytecodeArrays() {
   }
 }
 
+#if BUILDFLAG(BRAVE_PAGE_GRAPH_ENABLED)
+int Isolate::GetExecutingScriptId() {
+  StackTraceFrameIterator it(this);
+  while (!it.done()) {
+    if (!it.is_javascript() && !it.is_wasm()) {
+      it.Advance();
+      continue;
+    }
+
+    JavaScriptFrame* frame = it.javascript_frame();
+    Handle<JSFunction> function(frame->function(), this);
+
+    Object maybe_script = function->shared().script();
+    if (!maybe_script.IsScript()) {
+      it.Advance();
+      continue;
+    }
+
+    Script script = Script::cast(maybe_script);
+
+    if (script.id() > 0) {
+      return script.id();
+    }
+    it.Advance();
+  }
+
+  return 0;
+}
+
+void Isolate::ReportBuiltInCallAndResponse(const char* func_name,
+    const std::vector<const std::string>& args, const std::string& result) {
+  BuiltInFuncCallFunc call_func = GetBuiltInFuncCallFunc();
+  auto extern_isolate = reinterpret_cast<v8::Isolate*>(this);
+  if (call_func) {
+    call_func(*extern_isolate, func_name, args);
+  }
+  BuiltInFuncResponseFunc rs_func = GetBuiltInFuncResponseFunc();
+  if (rs_func) {
+    rs_func(*extern_isolate, func_name, result);
+  }
+}
+#endif
+
 #ifdef V8_INTL_SUPPORT
 icu::UMemory* Isolate::get_cached_icu_object(ICUObjectCacheType cache_type) {
   return icu_object_cache_[cache_type].get();
