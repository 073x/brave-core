diff --git a/third_party/blink/renderer/core/frame/frame_console.cc b/third_party/blink/renderer/core/frame/frame_console.cc
index 25d8991f8dd3..06c1c1c9e62d 100644
--- a/third_party/blink/renderer/core/frame/frame_console.cc
+++ b/third_party/blink/renderer/core/frame/frame_console.cc
@@ -43,6 +43,11 @@
 #include "third_party/blink/renderer/platform/loader/fetch/resource_response.h"
 #include "third_party/blink/renderer/platform/wtf/text/string_builder.h"
 
+
+// #if BUILDFLAG(BRAVE_PAGE_GRAPH_ENABLED)
+#include "base/json/json_string_value_serializer.h"
+// #endif
+
 namespace blink {
 
 FrameConsole::FrameConsole(LocalFrame& frame) : frame_(&frame) {}
@@ -68,6 +73,61 @@ void FrameConsole::ReportMessageToClient(mojom::ConsoleMessageSource source,
                                          mojom::ConsoleMessageLevel level,
                                          const String& message,
                                          SourceLocation* location) {
+// #if BUILDFLAG(BRAVE_PAGE_GRAPH_ENABLED)
+  if (frame_->GetDocument() != nullptr) {
+    ::brave_page_graph::PageGraph* page_graph = frame_->GetDocument()->GetPageGraph();
+    if (page_graph != nullptr) {
+      base::Value dict{base::Value::Type::DICTIONARY};
+
+      const char* source_name = "Unknown";
+      switch (source) {
+        case mojom::ConsoleMessageSource::kXml: source_name = "Xml"; break; 
+        case mojom::ConsoleMessageSource::kJavaScript: source_name = "JavaScript"; break; 
+        case mojom::ConsoleMessageSource::kNetwork: source_name = "Network"; break; 
+        case mojom::ConsoleMessageSource::kConsoleApi: source_name = "ConsoleApi"; break; 
+        case mojom::ConsoleMessageSource::kStorage: source_name = "Storage"; break; 
+        case mojom::ConsoleMessageSource::kAppCache: source_name = "AppCache"; break; 
+        case mojom::ConsoleMessageSource::kRendering: source_name = "Rendering"; break; 
+        case mojom::ConsoleMessageSource::kSecurity: source_name = "Security"; break; 
+        case mojom::ConsoleMessageSource::kOther: source_name = "Other"; break; 
+        case mojom::ConsoleMessageSource::kDeprecation: source_name = "Deprecation"; break; 
+        case mojom::ConsoleMessageSource::kWorker: source_name = "Worker"; break; 
+        case mojom::ConsoleMessageSource::kViolation: source_name = "Violation"; break; 
+        case mojom::ConsoleMessageSource::kIntervention: source_name = "Intervention"; break; 
+        case mojom::ConsoleMessageSource::kRecommendation: source_name = "Recommendation"; break;
+      }
+      dict.SetStringKey("source", source_name);
+
+      const char* level_name = "Unknown";
+      switch (level) {
+        case mojom::ConsoleMessageLevel::kVerbose: level_name = "Verbose"; break;
+        case mojom::ConsoleMessageLevel::kInfo: level_name = "Info"; break;
+        case mojom::ConsoleMessageLevel::kWarning: level_name = "Warning"; break;
+        case mojom::ConsoleMessageLevel::kError: level_name = "Error"; break;
+      }
+      dict.SetStringKey("level", level_name);
+      
+      dict.SetStringKey("message", message.Utf8());
+      
+      base::Value loc{base::Value::Type::DICTIONARY};
+      loc.SetStringKey("url", location->Url().Utf8());
+      loc.SetIntKey("line", location->LineNumber());
+      loc.SetIntKey("column", location->ColumnNumber());
+      loc.SetIntKey("scriptId", location->ScriptId());
+      dict.SetKey("location", std::move(loc));
+
+      std::string output;
+      JSONStringValueSerializer serializer{&output};
+      DCHECK(serializer.Serialize(dict));
+
+      page_graph->RegisterWebAPICall(
+          ::brave_page_graph::WebAPI::kWebAPIConsoleLog,
+          std::vector<const String>{String::FromUTF8(output)});
+    }
+  
+  }
+// #endif
+
   if (source == mojom::ConsoleMessageSource::kNetwork)
     return;
 
