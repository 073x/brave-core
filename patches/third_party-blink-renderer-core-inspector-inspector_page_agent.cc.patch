diff --git a/third_party/blink/renderer/core/inspector/inspector_page_agent.cc b/third_party/blink/renderer/core/inspector/inspector_page_agent.cc
index 1ff765e6e0e238c713e8235efb4958a96a99eadd..7c5610038beb195d644830a75fd6c823aabaf9ba 100644
--- a/third_party/blink/renderer/core/inspector/inspector_page_agent.cc
+++ b/third_party/blink/renderer/core/inspector/inspector_page_agent.cc
@@ -85,6 +85,10 @@
 #include "third_party/blink/renderer/platform/wtf/vector.h"
 #include "v8/include/v8-inspector.h"
 
+// #if BUILDFLAG(BRAVE_PAGE_GRAPH_ENABLED)
+#include "brave/third_party/blink/brave_page_graph/page_graph.h"
+// #endif
+
 namespace blink {
 
 using protocol::Response;
@@ -864,7 +868,7 @@ void InspectorPageAgent::DidClearDocumentOfWindowObject(LocalFrame* frame) {
     const String world_name = worlds_to_evaluate_on_load_.Get(key);
     if (world_name.IsEmpty()) {
       frame->GetScriptController().ExecuteScriptInMainWorld(
-          source, ScriptSourceLocationType::kUnknown,
+          source, ScriptSourceLocationType::kInspector,
           ScriptController::kExecuteScriptWhenScriptsDisabled);
       continue;
     }
@@ -878,12 +882,14 @@ void InspectorPageAgent::DidClearDocumentOfWindowObject(LocalFrame* frame) {
     // a foreign world.
     v8::HandleScope handle_scope(V8PerIsolateData::MainThreadIsolate());
     frame->GetScriptController().ExecuteScriptInIsolatedWorld(
-        world->GetWorldId(), source, KURL(), SanitizeScriptErrors::kSanitize);
+        world->GetWorldId(),
+        ScriptSourceCode(source, ScriptSourceLocationType::kInspector), KURL(),
+        SanitizeScriptErrors::kSanitize);
   }
 
   if (!script_to_evaluate_on_load_once_.IsEmpty()) {
     frame->GetScriptController().ExecuteScriptInMainWorld(
-        script_to_evaluate_on_load_once_, ScriptSourceLocationType::kUnknown,
+        script_to_evaluate_on_load_once_, ScriptSourceLocationType::kInspector,
         ScriptController::kExecuteScriptWhenScriptsDisabled);
   }
 }
@@ -1393,6 +1399,31 @@ Response InspectorPageAgent::setInterceptFileChooserDialog(bool enabled) {
   return Response::Success();
 }
 
+Response InspectorPageAgent::generatePageGraph(String* data) {
+// #if BUILDFLAG(BRAVE_PAGE_GRAPH_ENABLED)
+  LocalFrame* main_frame = inspected_frames_->Root();
+  if (!main_frame) {
+    return Response::ServerError("No main frame found");
+  }
+
+  Document* document = main_frame->GetDocument();
+  if (!document) {
+    return Response::ServerError("No Document instance to generate page graph for");
+  }
+
+  ::brave_page_graph::PageGraph* const page_graph = document->GetPageGraph();
+  if (!page_graph) {
+    return Response::ServerError("No Page Graph for this Document");
+  }
+
+  std::string graphml(page_graph->ToGraphML());
+  *data = String::FromUTF8(graphml.c_str());
+  return Response::Success();
+// #else
+//   return Response::ServerError("Browser not built with Page Graph support");
+// #endif
+}
+
 Response InspectorPageAgent::generateTestReport(const String& message,
                                                 Maybe<String> group) {
   LocalDOMWindow* window = inspected_frames_->Root()->DomWindow();
