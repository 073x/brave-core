diff --git a/third_party/blink/renderer/core/loader/modulescript/document_module_script_fetcher.cc b/third_party/blink/renderer/core/loader/modulescript/document_module_script_fetcher.cc
index 271cac77dcd0a6bfbe759c09e06855f7134171ce..0fe87c7aab5f480e77a9cf8fdbb6b2da1425cf2f 100644
--- a/third_party/blink/renderer/core/loader/modulescript/document_module_script_fetcher.cc
+++ b/third_party/blink/renderer/core/loader/modulescript/document_module_script_fetcher.cc
@@ -15,6 +15,10 @@
 #include "third_party/blink/renderer/platform/heap/heap.h"
 #include "third_party/blink/renderer/platform/wtf/vector.h"
 
+#include "third_party/blink/renderer/core/loader/resource/script_resource.h"
+#include "brave/third_party/blink/brave_page_graph/types.h"
+#include "brave/third_party/blink/brave_page_graph/page_graph.h"
+#include "brave/third_party/blink/brave_page_graph/utilities/response_metadata.h"
 namespace blink {
 
 DocumentModuleScriptFetcher::DocumentModuleScriptFetcher(
@@ -25,6 +29,7 @@ void DocumentModuleScriptFetcher::Fetch(
     FetchParameters& fetch_params,
     ModuleType expected_module_type,
     ResourceFetcher* fetch_client_settings_object_fetcher,
+    const Modulator* modulator,
     ModuleGraphLevel level,
     ModuleScriptFetcher::Client* client) {
   DCHECK_EQ(fetch_params.GetScriptType(), mojom::blink::ScriptType::kModule);
@@ -37,8 +42,19 @@ void DocumentModuleScriptFetcher::Fetch(
   ScriptResource::StreamingAllowed streaming_allowed =
                         IsMainThread() ? ScriptResource::kAllowStreaming
                                        : ScriptResource::kNoStreaming;
+  ScriptResource* resource =
   ScriptResource::Fetch(fetch_params, fetch_client_settings_object_fetcher,
                         this, streaming_allowed);
+  ::brave_page_graph::PageGraph* page_graph = modulator->GetPageGraph();
+  if (page_graph != nullptr) {
+    this->page_graph_ = page_graph;
+    const auto initiator_elm = modulator->GetInitiatingDOMNodeId();
+    if(initiator_elm > 0) {
+      page_graph->RegisterRequestStartFromElm(initiator_elm, resource->InspectorId(), fetch_params.Url(), brave_page_graph::RequestType::kRequestTypeScriptModule);
+    } else {
+      LOG(ERROR) << "no initiator element for " << fetch_params.Url();
+    }
+  }
 }
 
 void DocumentModuleScriptFetcher::NotifyFinished(Resource* resource) {
@@ -51,6 +67,13 @@ void DocumentModuleScriptFetcher::NotifyFinished(Resource* resource) {
     if (!WasModuleLoadSuccessful(script_resource, expected_module_type_,
                                  &error_messages)) {
       client_->NotifyFetchFinishedError(error_messages);
+      {
+        if (page_graph_ != nullptr) {
+          const ResourceResponse& rep = resource->GetResponse();
+          const ::brave_page_graph::ResponseMetadata metadata(rep);
+          page_graph_->RegisterRequestError(resource->InspectorId(), metadata);
+        }
+      }
       return;
     }
   }
@@ -71,6 +94,14 @@ void DocumentModuleScriptFetcher::NotifyFinished(Resource* resource) {
   const KURL& url = script_resource->GetResponse().CurrentRequestUrl();
   // Create an external module script where base_url == source_url.
   // https://html.spec.whatwg.org/multipage/webappapis.html#concept-script-base-url
+  {
+    if (page_graph_ != nullptr) {
+      const ResourceResponse& rep = resource->GetResponse();
+      const ::brave_page_graph::ResponseMetadata metadata(rep);
+      page_graph_->RegisterRequestComplete(resource->InspectorId(),
+          resource->GetType(), metadata, ResourceDigest(resource));
+    }
+  }
   client_->NotifyFetchFinishedSuccess(ModuleScriptCreationParams(
       /*source_url=*/url, /*base_url=*/url,
       ScriptSourceLocationType::kExternalFile, expected_module_type_,
