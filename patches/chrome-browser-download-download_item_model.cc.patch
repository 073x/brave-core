diff --git a/chrome/browser/download/download_item_model.cc b/chrome/browser/download/download_item_model.cc
index 3c4694117117e93a6f5827987368d513f9482f41..f950acef3a57cddab1da13a3a15eb7f563a4ac23 100644
--- a/chrome/browser/download/download_item_model.cc
+++ b/chrome/browser/download/download_item_model.cc
@@ -158,7 +158,7 @@ DownloadItemModelData::DownloadItemModelData()
       danger_level_(DownloadFileType::NOT_DANGEROUS),
       is_being_revived_(false) {}
 
-#if BUILDFLAG(FULL_SAFE_BROWSING)
+#if BUILDFLAG(FULL_SAFE_BROWSING) && !BUILDFLAG(IS_ANDROID)
 bool ShouldSendDownloadReport(download::DownloadDangerType danger_type) {
   switch (danger_type) {
     case download::DOWNLOAD_DANGER_TYPE_DANGEROUS_URL:
@@ -1121,6 +1121,7 @@ bool DownloadItemModel::IsExtensionDownload() const {
 
 #if BUILDFLAG(FULL_SAFE_BROWSING)
 void DownloadItemModel::CompleteSafeBrowsingScan() {
+#if !BUILDFLAG(IS_ANDROID)
   if (download_->IsSavePackageDownload()) {
     download_->OnAsyncScanningCompleted(
         download::DOWNLOAD_DANGER_TYPE_USER_VALIDATED);
@@ -1133,10 +1134,12 @@ void DownloadItemModel::CompleteSafeBrowsingScan() {
                     kSafeBrowsingUserDataKey));
     state->CompleteDownload();
   }
+#endif
 }
 
 void DownloadItemModel::ReviewScanningVerdict(
     content::WebContents* web_contents) {
+#if !BUILDFLAG(IS_ANDROID)
   auto command_callback =
       [](std::unique_ptr<DownloadItemModel> model,
          std::unique_ptr<DownloadCommands> download_commands,
@@ -1154,6 +1157,7 @@ void DownloadItemModel::ReviewScanningVerdict(
           command_callback, std::make_unique<DownloadItemModel>(download_),
           std::make_unique<DownloadCommands>(DownloadUIModel::GetWeakPtr()),
           DownloadCommands::DISCARD));
+#endif
 }
 #endif
 
