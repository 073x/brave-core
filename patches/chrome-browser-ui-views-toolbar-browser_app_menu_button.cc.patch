diff --git a/chrome/browser/ui/views/toolbar/browser_app_menu_button.cc b/chrome/browser/ui/views/toolbar/browser_app_menu_button.cc
index 59e399de0f7bdf299fdebfb747d471a7e0abcd34..289c86871ca89b49ea1f7950ddb027b6afdc138e 100644
--- a/chrome/browser/ui/views/toolbar/browser_app_menu_button.cc
+++ b/chrome/browser/ui/views/toolbar/browser_app_menu_button.cc
@@ -11,6 +11,7 @@
 #include "base/single_thread_task_runner.h"
 #include "base/threading/thread_task_runner_handle.h"
 #include "base/time/time.h"
+#include "brave/browser/ui/toolbar/brave_app_menu_model.h"
 #include "cc/paint/paint_flags.h"
 #include "chrome/browser/ui/browser.h"
 #include "chrome/browser/ui/browser_otr_state.h"
@@ -53,9 +54,11 @@
 
 namespace {
 
+#if !defined(OS_ANDROID)
 // Cycle duration of ink drop pulsing animation used for in-product help.
 constexpr base::TimeDelta kFeaturePromoPulseDuration =
     base::TimeDelta::FromMilliseconds(800);
+#endif
 
 // Max inset for pulsing animation.
 constexpr float kFeaturePromoPulseInsetDip = 3.0f;
@@ -72,13 +75,18 @@ class PulsingInkDropMask : public views::AnimationDelegateViews,
                      float max_inset)
       : AnimationDelegateViews(layer_container),
         views::InkDropMask(layer_size),
-        layer_container_(layer_container),
-        margins_(margins),
+        margins_(margins)
+#if !defined(OS_ANDROID)
+        ,layer_container_(layer_container),
         normal_corner_radius_(normal_corner_radius),
         max_inset_(max_inset),
-        throb_animation_(this) {
+        throb_animation_(this)
+#endif
+         {
+#if !defined(OS_ANDROID)
     throb_animation_.SetThrobDuration(kFeaturePromoPulseDuration);
     throb_animation_.StartThrobbing(-1);
+#endif
   }
 
  private:
@@ -92,17 +100,19 @@ class PulsingInkDropMask : public views::AnimationDelegateViews,
 
     gfx::RectF bounds(layer()->bounds());
     bounds.Inset(margins_);
-
+#if !defined(OS_ANDROID)
     const float current_inset =
         throb_animation_.CurrentValueBetween(0.0f, max_inset_);
     bounds.Inset(gfx::InsetsF(current_inset));
     const float corner_radius = normal_corner_radius_ - current_inset;
 
     recorder.canvas()->DrawRoundRect(bounds, corner_radius, flags);
+#endif
   }
 
   // views::AnimationDelegateViews:
   void AnimationProgressed(const gfx::Animation* animation) override {
+#if !defined(OS_ANDROID)
     DCHECK_EQ(animation, &throb_animation_);
     layer()->SchedulePaint(gfx::Rect(layer()->size()));
 
@@ -111,17 +121,19 @@ class PulsingInkDropMask : public views::AnimationDelegateViews,
     // on screen. TODO(crbug.com/935808): remove this workaround once the bug is
     // fixed.
     layer_container_->SchedulePaint();
+#endif
   }
-
+#if !defined(OS_ANDROID)
   // The View that contains the InkDrop layer we're masking. This must outlive
   // our instance.
   views::View* const layer_container_;
+#endif
 
   // Margins between the layer bounds and the visible ink drop. We use this
   // because sometimes the View we're masking is larger than the ink drop we
   // want to show.
   const gfx::Insets margins_;
-
+#if !defined(OS_ANDROID)
   // Normal corner radius of the ink drop without animation. This is also the
   // corner radius at the largest instant of the animation.
   const float normal_corner_radius_;
@@ -130,6 +142,7 @@ class PulsingInkDropMask : public views::AnimationDelegateViews,
   const float max_inset_;
 
   gfx::ThrobAnimation throb_animation_;
+#endif
 };
 
 }  // namespace
@@ -246,7 +259,7 @@ void BrowserAppMenuButton::ShowMenu(int run_types) {
       promo_feature_ == InProductHelpFeature::kReopenTab;
 
   RunMenu(
-      std::make_unique<AppMenuModel>(toolbar_view_, browser,
+      std::make_unique<BraveAppMenuModel>(toolbar_view_, browser,
                                      toolbar_view_->app_menu_icon_controller()),
       browser, run_types, alert_reopen_tab_items);
 }
