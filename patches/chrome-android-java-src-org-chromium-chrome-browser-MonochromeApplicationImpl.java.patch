diff --git a/chrome/android/java/src/org/chromium/chrome/browser/MonochromeApplicationImpl.java b/chrome/android/java/src/org/chromium/chrome/browser/MonochromeApplicationImpl.java
index 80f97ffce49b2a6cf04ccfdc1df390e72bb43b2a..2eee5d928db7c6a51c81c770fbd598416b477f40 100644
--- a/chrome/android/java/src/org/chromium/chrome/browser/MonochromeApplicationImpl.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/MonochromeApplicationImpl.java
@@ -4,7 +4,7 @@
 
 package org.chromium.chrome.browser;
 
-import org.chromium.android_webview.nonembedded.WebViewApkApplication;
+//import org.chromium.android_webview.nonembedded.WebViewApkApplication;
 import org.chromium.base.ActivityState;
 import org.chromium.base.ApplicationStatus;
 import org.chromium.chrome.browser.base.SplitCompatApplication;
@@ -32,17 +32,18 @@ public class MonochromeApplicationImpl extends ChromeApplicationImpl {
             // Performing Monochrome WebView DevTools Launcher icon showing/hiding logic in
             // onCreate rather than in attachBaseContext() because it depends on application
             // context being initiatied.
-            if (getApplication().isWebViewProcess()) {
-                // Whenever a monochrome webview process is launched (WebView service or
-                // developer UI), post a background task to show/hide the DevTools icon.
-                WebViewApkApplication.postDeveloperUiLauncherIconTask();
-            } else if (SplitCompatApplication.isBrowserProcess()) {
+            // if (getApplication().isWebViewProcess()) {
+            //     // Whenever a monochrome webview process is launched (WebView service or
+            //     // developer UI), post a background task to show/hide the DevTools icon.
+            //     WebViewApkApplication.postDeveloperUiLauncherIconTask();
+            // } else 
+            if (SplitCompatApplication.isBrowserProcess()) {
                 // Frequently check current system webview provider and show/hide the icon
                 // accordingly by listening to Monochrome browser Activities status (whenever a
                 // browser activity comes to the foreground).
                 ApplicationStatus.registerStateListenerForAllActivities((activity, state) -> {
                     if (state == ActivityState.STARTED) {
-                        WebViewApkApplication.postDeveloperUiLauncherIconTask();
+//                        WebViewApkApplication.postDeveloperUiLauncherIconTask();
                     }
                 });
             }
