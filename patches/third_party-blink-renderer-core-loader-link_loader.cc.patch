diff --git a/third_party/blink/renderer/core/loader/link_loader.cc b/third_party/blink/renderer/core/loader/link_loader.cc
index 9d108dc0240c09b03af9b37724c8f0c9326136a4..29cebf905a245c876a11ff81c45960757dda41d5 100644
--- a/third_party/blink/renderer/core/loader/link_loader.cc
+++ b/third_party/blink/renderer/core/loader/link_loader.cc
@@ -52,6 +52,13 @@
 #include "third_party/blink/renderer/platform/loader/subresource_integrity.h"
 #include "third_party/blink/renderer/platform/runtime_enabled_features.h"
 
+#include <string>
+#include "third_party/blink/renderer/core/dom/dom_node_ids.h"
+#include "third_party/blink/renderer/core/html/html_link_element.h"
+#include "brave/third_party/blink/brave_page_graph/logging.h"
+#include "brave/third_party/blink/brave_page_graph/types.h"
+#include "brave/third_party/blink/brave_page_graph/page_graph.h"
+#include "brave/third_party/blink/brave_page_graph/utilities/response_metadata.h"
 namespace blink {
 
 class WebPrescientNetworking;
@@ -92,6 +99,23 @@ void LinkLoader::NotifyFinished(Resource* resource) {
   } else {
     client_->LinkLoaded();
   }
+  {
+    if (link_element_ != nullptr) {
+      ::brave_page_graph::PageGraph* page_graph =
+          link_element_->GetDocument().GetPageGraph();
+      if (page_graph != nullptr) {
+        const ResourceResponse& rep = resource->GetResponse();
+        const ::brave_page_graph::ResponseMetadata metadata(rep);
+
+        if (resource->ErrorOccurred()) {
+          page_graph->RegisterRequestError(resource->InspectorId(), metadata);
+        } else {
+          page_graph->RegisterRequestComplete(resource->InspectorId(),
+              resource->GetType(), metadata, ResourceDigest(resource));
+        }
+      }
+    }
+  }
 }
 
 // https://html.spec.whatwg.org/C/#link-type-modulepreload
@@ -189,8 +213,20 @@ void LinkLoader::LoadStylesheet(
         integrity_attr);
   }
 
+  Resource* resource =
   CSSStyleSheetResource::Fetch(link_fetch_params, context->Fetcher(),
                                link_client);
+  {
+    if (link_element_ != nullptr) {
+      ::brave_page_graph::PageGraph* page_graph = document.GetPageGraph();
+      if (page_graph != nullptr) {
+        auto node_id = DOMNodeIds::IdForNode(link_element_);
+        page_graph->RegisterRequestStartFromElm(
+          node_id, resource->InspectorId(), params.href,
+          ::brave_page_graph::RequestType::kRequestTypeCSS);
+      }
+    }
+  }
 }
 
 void LinkLoader::Abort() {
@@ -213,6 +249,10 @@ void LinkLoader::Trace(Visitor* visitor) const {
   visitor->Trace(client_);
   visitor->Trace(pending_preload_);
   visitor->Trace(prerender_);
+  visitor->Trace(link_element_);
 }
 
+void LinkLoader::SetHTMLLinkElementOwner(HTMLLinkElement* link_element) {
+  link_element_ = link_element;
+}
 }  // namespace blink
