diff --git a/content/browser/frame_host/navigation_controller_impl.cc b/content/browser/frame_host/navigation_controller_impl.cc
index 1bb7007c16029db901514e79171952d07b47058e..eb6a4c419cd0acfe08660fdece48e45b5c6cbebc 100644
--- a/content/browser/frame_host/navigation_controller_impl.cc
+++ b/content/browser/frame_host/navigation_controller_impl.cc
@@ -946,8 +946,10 @@ void NavigationControllerImpl::LoadURL(const GURL& url,
 }
 
 void NavigationControllerImpl::LoadURLWithParams(const LoadURLParams& params) {
+#if !defined(OS_ANDROID)
   if (params.is_renderer_initiated)
     DCHECK(params.initiator_origin.has_value());
+#endif
 
   TRACE_EVENT1("browser,navigation",
                "NavigationControllerImpl::LoadURLWithParams", "url",
@@ -2887,16 +2889,17 @@ void NavigationControllerImpl::NavigateWithoutEntry(
   // Note: we intentionally leave the pending entry in place for renderer debug
   // URLs, unlike the cases below where we clear it if the navigation doesn't
   // proceed.
-  if (IsRendererDebugURL(params.url)) {
+  const GURL url = params.url.SchemeIs(url::kJavaScriptScheme) ? params.url : pending_entry_->GetURL();
+  if (IsRendererDebugURL(url)) {
     // Renderer-debug URLs won't go through NavigationThrottlers so we have to
     // check them explicitly. See bug 913334.
     if (GetContentClient()->browser()->IsRendererDebugURLBlacklisted(
-            params.url, browser_context_)) {
+            url, browser_context_)) {
       DiscardPendingEntry(false);
       return;
     }
 
-    HandleRendererDebugURL(node, params.url);
+    HandleRendererDebugURL(node, url);
     return;
   }
 
@@ -3087,7 +3090,9 @@ NavigationControllerImpl::CreateNavigationRequestFromLoadParams(
   DCHECK_EQ(-1, GetIndexOfEntry(entry));
   DCHECK(frame_entry);
   // All renderer-initiated navigations must have an initiator_origin.
+#if !defined(OS_ANDROID)
   DCHECK(!params.is_renderer_initiated || params.initiator_origin.has_value());
+#endif
 
   GURL url_to_load;
   GURL virtual_url;
