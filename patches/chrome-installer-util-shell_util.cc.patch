diff --git a/chrome/installer/util/shell_util.cc b/chrome/installer/util/shell_util.cc
index bba833d2f3abeb8f0a6fefa59ace416db3dc2b63..ca3604b2ab8fcd9a74718e54fb1263d4ba32be26 100644
--- a/chrome/installer/util/shell_util.cc
+++ b/chrome/installer/util/shell_util.cc
@@ -748,6 +748,10 @@ base::string16 GetTargetForDefaultAppsSettings(const wchar_t* protocol) {
     return base::StringPrintf(kSystemSettingsDefaultAppsFormat, L"Browser");
   if (base::EqualsCaseInsensitiveASCII(protocol, L"mailto"))
     return base::StringPrintf(kSystemSettingsDefaultAppsFormat, L"Email");
+  if (base::EqualsCaseInsensitiveASCII(protocol, L"ipfs"))
+    return base::StringPrintf(kSystemSettingsDefaultAppsFormat, L"IPFS");
+  if (base::EqualsCaseInsensitiveASCII(protocol, L"ipns"))
+    return base::StringPrintf(kSystemSettingsDefaultAppsFormat, L"IPNS");
   return L"SettingsPageAppsDefaultsProtocolView";
 }
 
@@ -1619,10 +1623,12 @@ const wchar_t* ShellUtil::kPotentialFileAssociations[] = {
     L".htm", L".html",  L".pdf",  L".shtml", L".svg",
     L".xht", L".xhtml", L".webp", nullptr};
 const wchar_t* ShellUtil::kBrowserProtocolAssociations[] = {L"ftp", L"http",
-                                                            L"https", nullptr};
+                                                            L"https", L"ipfs",
+                                                            L"ipns", nullptr};
 const wchar_t* ShellUtil::kPotentialProtocolAssociations[] = {
     L"ftp", L"http",  L"https", L"irc", L"mailto", L"mms",    L"news", L"nntp",
-    L"sms", L"smsto", L"snews", L"tel", L"urn",    L"webcal", nullptr};
+    L"sms", L"smsto", L"snews", L"tel", L"urn",    L"webcal", L"ipfs", L"ipns",
+     nullptr};
 const wchar_t* ShellUtil::kRegUrlProtocol = L"URL Protocol";
 const wchar_t* ShellUtil::kRegApplication = L"\\Application";
 const wchar_t* ShellUtil::kRegAppUserModelId = L"AppUserModelId";
