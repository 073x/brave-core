diff --git a/third_party/blink/renderer/core/css/css_image_value.cc b/third_party/blink/renderer/core/css/css_image_value.cc
index a54fb823421124ab67883f1362e10fdb58ea2a71..c49f516eb94971d507ba5479cd3e27176a8c5b7c 100644
--- a/third_party/blink/renderer/core/css/css_image_value.cc
+++ b/third_party/blink/renderer/core/css/css_image_value.cc
@@ -37,6 +37,9 @@
 #include "third_party/blink/renderer/platform/network/network_state_notifier.h"
 #include "third_party/blink/renderer/platform/weborigin/kurl.h"
 
+#include "third_party/blink/renderer/core/dom/dom_node_ids.h"
+#include "brave/third_party/blink/brave_page_graph/types.h"
+#include "brave/third_party/blink/brave_page_graph/page_graph.h"
 namespace blink {
 
 CSSImageValue::CSSImageValue(const AtomicString& raw_value,
@@ -116,8 +119,19 @@ StyleImage* CSSImageValue::CacheImage(
 
     FetchParameters params =
         PrepareFetch(document, image_request_behavior, cross_origin);
+    brave_page_graph::InspectorId inspector_id;
+    ImageResourceContent* image = ImageResourceContent::Fetch(params, document.Fetcher(), &inspector_id);
+    {
+      Document& mutable_document = const_cast<Document&>(document);
+      ::brave_page_graph::PageGraph* page_graph =
+          mutable_document.GetPageGraph();
+      if (page_graph != nullptr) {
+        page_graph->RegisterRequestStartFromCSS(inspector_id, params.Url(),
+            ::brave_page_graph::RequestType::kRequestTypeImage);
+      }
+    }
     cached_image_ = MakeGarbageCollected<StyleFetchedImage>(
-        ImageResourceContent::Fetch(params, document.Fetcher()), document,
+        image, inspector_id, document,
         params.GetImageRequestBehavior() == FetchParameters::kDeferImageLoad,
         origin_clean_ == OriginClean::kTrue, is_ad_related_, params.Url());
   }
