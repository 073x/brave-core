# Copyright (c) 2020 The Brave Authors. All rights reserved.
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at https://mozilla.org/MPL/2.0/.

# Copyright 2021 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/config/rust.gni")
import("//brave/build/cargo.gni")
import("//brave/build/rust/config.gni")

import("//third_party/rust/cxx/chromium_integration/rust_cxx.gni")

template("brave_rust_cxx") {
  if (enable_rust) {
    _target_name_gen = "${target_name}_brave_gen"

    group(target_name) {
      public_deps = [
        "//brave/build/rust:rust_lib",
        ":${_target_name_gen}",
      ]
    }

    rust_cxx(_target_name_gen) {
      export_symbols = false
      forward_variables_from(invoker, "*")
    }
  } else {
    rust_crate(target_name) {
    # action(target_name) {
    #   script = "//build/noop.py"
      visibility = [ "*" ]
      inputs = invoker.sources
      forward_variables_from(invoker, "*", ["sources"])
    #   outputs = [

    #   ]
    #   # if (defined(invoker.sources)) {
    #   #   inputs
    }
  }
}
#   assert(defined(invoker.input), "Must specify the Rust file to use as input.")
#   action_foreach("${target_name}_gen") {
#     visibility = [ ":*" ]
#     sources = invoker.input

#     output_h = "{{source_gen_dir}}/{{source_file_part}}.h"
#     output_cc = "{{source_gen_dir}}/{{source_file_part}}.cc"

#     cxxbridge_executable = "${rustup_home}/bin/cxxbridge"
#     if (is_win) {
#       cxxbridge_executable = "${cxxbridge_executable}.exe"
#     }

#     script = "//third_party/rust/cxx/chromium_integration/run_cxxbridge.py"
#     inputs = [
#       cxxbridge_executable,
#       script,
#     ]
#     outputs = [
#       output_h,
#       output_cc,
#     ]

#     args = [
#       "--exe=" + rebase_path(cxxbridge_executable),
#       "--header",
#       output_h,
#       "--cc",
#       output_cc,
#       "{{source}}",
#     ]

#     # Anyone building the header files we generate needs to have
#     # RUST_CXX_NO_EXCEPTIONS defined so that they build without
#     # exception supports
#     deps = [ "//build/rust:cxx_cppdeps" ]
#     # public_configs = [ "//brave/build/rust:cxx_cppconfig" ]
#   }

#   rust_ffi(target_name) {
#     sources = get_target_outputs(":${target_name}_gen")
#     deps = [ "//build/rust:cxx_cppdeps" ]
#     deps += invoker.native_header_deps
#     public_deps = [ ":${target_name}_gen" ]
#   }
# }
