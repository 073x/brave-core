# Copyright (c) 2022 The Brave Authors. All rights reserved.
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at https://mozilla.org/MPL/2.0/.

import("//brave/build/cargo.gni")
import("//build/config/sanitizers/sanitizers.gni")
import("//build/config/coverage/coverage.gni")

if (is_mac) {
  import("//build/config/mac/mac_sdk.gni")
}

config("strip_rust_symbols") {
  # should match verify_chrome_framework_order
  if (is_apple && !is_component_build && chrome_pgo_phase != 1 &&
      !using_sanitizer) {
    ldflags = [
      # prevent export of all rust symbols
      "-Wl,-exported_symbols_list," + rebase_path("//brave/app/framework.exports", root_out_dir),
    ]
    # if (use_clang_coverage) {
    # framework_with_coverage.exports
    #   ldflags += [
    #     "-Wl,-export_symbol,lprofDirMode",
    #     "-Wl,-export_symbol,__llvm_profile_raw_version",
    #     "-Wl,-export_symbol,__llvm_profile_filename",
    #   ]
    # }
  }
}

if (enable_rust) {
_clang_bin_path = rebase_path("$clang_base_path/bin/", root_build_dir)

_cxx = "${_clang_bin_path}/clang++"

action("run_cargo") {
  script = "//brave/script/cargo.py"

  rustc_wrapper = "//brave/script/rustc_wrapper.py"
  cargo_bin = "$rustup_home/bin/cargo"
  if (is_win) {
    cargo_bin = cargo_bin + ".exe"
  }

  visibility = [ ":*" ]
  inputs = [
    # "Cargo.lock",
    "Cargo.toml",
    "lib.rs",
  ]

  _rustflags = default_rustflags
  _rustflags += [ "-Clinker=\"$_cxx\"" ]

  manifest_path = "Cargo.toml"

  # ensure that we rebuild when the dependent crates change
  # TODO(bridiver) - selectively include these libraries based on buildflags,
  # but in order to do that we have to dynamically create the brave rust lib
  deps = [
    "//brave/components/filecoin:rust_lib",
    "//brave/components/skus/browser/rs:rust_lib",
    "//brave/components/speedreader/rust/lib",
    "//brave/third_party/challenge_bypass_ristretto_ffi:rust_lib",
  ]

  force_rebuild_inputs = [
    rustc_wrapper,
    script,
    cargo_bin,
    "Cargo.toml",
    # "Cargo.lock",
  ]

  if (is_apple) {
    toolchain_home =
        "$rustup_home/toolchains/$brave_rust_version-x86_64-apple-darwin"
    std_src_home = "$toolchain_home/lib/rustlib/src/rust/library/std/src"
    force_rebuild_inputs += [ "$std_src_home/personality/gcc.rs" ]
  }
  inputs += force_rebuild_inputs

  public_deps = [
    "//build/rust:cxx_cppdeps",
  ]

  outputs = [
    "${rust_lib_build_path}/build.json",
    "${rust_lib_build_path}/cargo.d",
    # rust_lib_output_path
  ]

  target = rustc_target  # defined by //brave/build/rust/config.gni,

  args = [
    "--exe=" + rebase_path(cargo_bin),
    "--rustup_home=" + rebase_path(rustup_home),
    "--manifest_path=" + rebase_path(manifest_path, root_build_dir),
    "--build_path=" + rebase_path(rust_lib_build_path, root_build_dir),
    "--target=" + target,
    "--clang_bin_path=" + _clang_bin_path,
    "--is_debug=$is_debug",
    "--profile=$cargo_profile",
  ]

  # See exclude_unwind_tables
  # TODO(bridiver) Investigate whether we should use unwind on android
  if (is_official_build) {
    args += [ "--panic=abort" ]
  } else {
    args += [ "--panic=unwind" ]
  }

  if (rustc_toolchain != "") {
    args += [ "--toolchain=$rustc_toolchain" ]
  }

  if (is_mac) {
    args += [ "--mac_deployment_target=" + mac_deployment_target ]
  }

  if (is_ios) {
    args += [ "--ios_deployment_target=" + ios_deployment_target ]
  }

  foreach(input, force_rebuild_inputs) {
    args += [
      "--inputs",
      rebase_path(input),
    ]
  }

  if (defined(_rustflags)) {
    foreach(flag, _rustflags) {
      args += [
        "--rust_flag",
        flag,
      ]
    }
  }
}
} else {
  group("run_cargo") {}
}

config("dep_config") {
  rlibs = exec_script("//brave/script/read_file.py",
                                 [rebase_path("${rust_lib_build_path}/cargo.d")],
                                 "list lines")
  libs = rlibs
}

static_library("rust_lib") {
  public_configs = [ ":dep_config" ]
  deps = [ ":run_cargo" ]
}
