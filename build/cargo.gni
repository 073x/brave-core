# Copyright (c) 2020 The Brave Authors. All rights reserved.
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at https://mozilla.org/MPL/2.0/.

import("//brave/build/rust/config.gni")
import("//build/config/clang/clang.gni")

if (is_mac) {
  import("//build/config/mac/mac_sdk.gni")
}

if (is_ios) {
  import("//build/config/ios/ios_sdk_overrides.gni")
}

rust_lib_build_path = "$root_build_dir/brave_rust/out/$current_cpu"

template("rust_ffi") {
  static_library(target_name) {
    public_deps = [
      "//brave/build/rust:rust_lib",
    ]
    if (defined(invoker.public_deps)) {
      public_deps += invoker.public_deps
    }

    deps = []
    if (is_apple) {
      deps += [
        # "//base",  # for rust_eh_personality_impl
      ]
    }
    if (defined(invoker.deps)) {
      deps += invoker.deps
    }

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]

    forward_variables_from(invoker,
                           "*",
                           [
                             "deps",
                            #  "frameworks",
                             "public_deps",
                           ])
  }
}

template("rust_crate") {
  action(target_name) {
    script = "//brave/script/stamp.py"

    forward_variables_from(invoker, [ "deps" ])

    if (defined(invoker.visibility)) {
      visibility = invoker.visibility
    } else {
      visibility = [ "//brave/build/rust:*" ]
    }

    inputs = [ script ]

    inputs += invoker.inputs

    _stamp = "${target_gen_dir}/${target_name}.stamp"

    args = [
      "--stamp",
      rebase_path(_stamp, root_build_dir),
    ]

    outputs = [ _stamp ]
  }
}

# Runs a script to generate C bindings for rust library
template("cargo_cbindgen") {
  action(target_name) {
    script = "//brave/script/cargo_cbindgen.py"

    forward_variables_from(invoker,
                           [
                             "config",
                             "sources",
                             "output",
                             "visibility",
                           ])

    assert(defined(config), "Must specify cbindgen.toml config to use")
    assert(defined(sources), "Must specify sources to generate bindings for")
    assert(defined(output), "Must specify output header file")

    sources += [ config ]
    outputs = [ output ]

    args = [
      "--rustup_home=" + rebase_path(rustup_home),
      "--cargo_home=" + rebase_path(rustup_home),
      "--config=" + rebase_path(config, root_build_dir),
      "--path=" + rebase_path(get_path_info(config, "dir"), root_build_dir),
      "--output=" + rebase_path(output, root_build_dir),
    ]
  }
}
